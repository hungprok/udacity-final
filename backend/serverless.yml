org: hungnguyen101196
app: udacity-final
service: udacity-finalft

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    ITEMS_TABLE: Items-${self:provider.stage}
    ITEMS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverlessappft-c4-item-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetItems:
    handler: src/lambda/http/getItems.handler
    tracing: true
    events:
      - http:
          method: get
          path: items
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:179144709916:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.ITEMS_CREATED_AT_INDEX}

  GetItemById:
    handler: src/lambda/http/getItemById.handler
    tracing: true
    events:
      - http:
          method: get
          path: item/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: arn:aws:dynamodb:${self:provider.region}:179144709916:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.ITEMS_CREATED_AT_INDEX}

  CreateItem:
    handler: src/lambda/http/createItem.handler
    tracing: true
    events:
      - http:
          method: post
          path: items
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schemas:
              application/json: ${file(models/create-item-model.json)}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !GetAtt ItemsTable.Arn

  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    tracing: true
    events:
      - http:
          method: patch
          cors: true
          path: items/{itemId}
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          request:
            schemas:
              application/json: ${file(models/update-item-model.json)}
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:*
        Resource: !GetAtt ItemsTable.Arn

  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    tracing: true
    events:
      - http:
          method: delete
          cors: true
          path: items/{itemId}
          authorizer: Auth
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt ItemsTable.Arn

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    tracing: true
    events:
      - http:
          method: post
          cors: true
          path: items/{itemId}/attachment
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource: !GetAtt ItemsTable.Arn

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: "ApiGatewayRestApi"

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: "request-body-validator"
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEMS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false
          RestrictPublicBuckets: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: udacityFinalProjectPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket